'use client';

import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import { 
  ArrowLeft,
  Bot,
  Target,
  Activity,
  Users,
  TrendingUp,
  ArrowRight,
  Calendar,
  Settings,
  Mail,
  Building,
  BarChart3,
  FileText,
  Zap,
  PieChart,
  ChevronUp,
  ChevronDown,
  CheckCircle,
  Edit,
  Check,
  Eye,
  Plus,
  X
} from 'lucide-react';

interface SelectedAccount {
  id: string;
  company_name: string;
  account_tier: string;
  status: string;
  primary_contact: string;
}

export default function CreateAgentPage() {
  const searchParams = useSearchParams();
  const entryPoint = searchParams.get('from') || 'agents'; // Get entry point from URL
  
  const [selectedAccounts, setSelectedAccounts] = useState<SelectedAccount[]>([]);
  const [step, setStep] = useState<'category' | 'select' | 'configure' | 'confirm'>('category');
  const [agentCategory, setAgentCategory] = useState<'customer-facing' | 'research' | null>(null);
  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);
  const [agentConfig, setAgentConfig] = useState({
    // Common fields
    purpose: '',
    ai_suggestions_enabled: true,
    
    // Customer-facing specific fields
    outreach_frequency: '3days' as const,
    max_attempts: 5,
    contact_methods: ['email'] as ('email' | 'phone' | 'linkedin')[],
    tone: 'professional' as 'friendly' | 'professional' | 'casual',
    message_style: 'concise' as 'concise' | 'detailed' | 'personalized',
    custom_message: '',
    
    // Research-specific fields
    research_frequency: 'daily' as 'daily' | 'weekly' | 'monthly',
    data_sources: ['web'] as ('web' | 'internal' | 'apis' | 'reports' | 'social' | 'news' | 'financial' | 'patents')[],
    report_format: 'executive' as 'executive' | 'detailed' | 'dashboard' | 'narrative',
    auto_insights: true,
    notification_threshold: 'medium' as 'low' | 'medium' | 'high',
    
    // New comprehensive fields
    analysis_framework: '',
    success_metric: 'insights_quality' as 'insights_quality' | 'trend_accuracy' | 'actionability' | 'coverage_completeness',
    escalation_rules: '',
    confidence_threshold: 'medium' as 'high' | 'medium' | 'low' | 'experimental',
    business_context: ''
  });
  const [showManualConfig, setShowManualConfig] = useState(false);
  const [aiGenerated, setAiGenerated] = useState(false);
  
  // Research configuration progressive disclosure states
  const [showResearchConfig, setShowResearchConfig] = useState(false);
  const [showFocusLibrary, setShowFocusLibrary] = useState(false);
  const [showAnalysisLibrary, setShowAnalysisLibrary] = useState(false);
  const [showAlertsLibrary, setShowAlertsLibrary] = useState(false);
  const [showContextLibrary, setShowContextLibrary] = useState(false);
  const [researchPrompt, setResearchPrompt] = useState('');
  
  // Compact pill display states
  const [showAllFocus, setShowAllFocus] = useState(false);
  const [showAllAnalysis, setShowAllAnalysis] = useState(false);
  const [showAllAlerts, setShowAllAlerts] = useState(false);
  const [showAllContext, setShowAllContext] = useState(false);
  
  // Email template states
  const [showEmailTemplates, setShowEmailTemplates] = useState(false);
  const [templatesExpanded, setTemplatesExpanded] = useState(true);
  const [editingTemplate, setEditingTemplate] = useState<string | null>(null);
  const [exampleEmail, setExampleEmail] = useState('');
  const [emailTemplates, setEmailTemplates] = useState({
    initial_outreach: '',
    follow_up_1: '',
    follow_up_2: '',
    meeting_request: '',
    final_attempt: ''
  });

  // Customer/Competitor selection states
  const [showCustomerSelection, setShowCustomerSelection] = useState(false);
  const [showCompetitorSelection, setShowCompetitorSelection] = useState(false);
  const [selectedCompetitors, setSelectedCompetitors] = useState<string[]>([]);
  const [selectedCustomers, setSelectedCustomers] = useState<string[]>([]);
  
  // Search states for customers and competitors
  const [customerSearchQuery, setCustomerSearchQuery] = useState('');
  const [competitorSearchQuery, setCompetitorSearchQuery] = useState('');
  
  // Recipient management states
  const [showRecipientList, setShowRecipientList] = useState(false);
  const [recipients, setRecipients] = useState<{
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    role: 'Admin' | 'User';
    title: string;
    accountId: string;
    accountName: string;
    source: 'auto' | 'manual';
  }[]>([]);
  const [editingRecipient, setEditingRecipient] = useState<string | null>(null);
  const [newRecipient, setNewRecipient] = useState({
    firstName: '',
    lastName: '',
    email: '',
    role: 'User' as 'Admin' | 'User',
    title: '',
    accountId: '',
    accountName: ''
  });
  const [showAddRecipient, setShowAddRecipient] = useState(false);
  
  // Mock contact data for accounts
  const mockAccountContacts = {
    'customer-001': [ // MarketingCorp
      { firstName: 'John', lastName: 'Smith', email: 'john.smith@marketingcorp.com', role: 'Admin' as const, title: 'VP Marketing' },
      { firstName: 'Sarah', lastName: 'Connor', email: 'sarah.connor@marketingcorp.com', role: 'User' as const, title: 'Marketing Manager' },
      { firstName: 'Mike', lastName: 'Johnson', email: 'mike.johnson@marketingcorp.com', role: 'User' as const, title: 'Campaign Specialist' }
    ],
    'customer-002': [ // TechStart Inc
      { firstName: 'Lisa', lastName: 'Wong', email: 'lisa.wong@techstart.com', role: 'Admin' as const, title: 'CTO' },
      { firstName: 'David', lastName: 'Chen', email: 'david.chen@techstart.com', role: 'User' as const, title: 'Product Manager' }
    ],
    'customer-003': [ // GlobalCorp
      { firstName: 'Robert', lastName: 'Kim', email: 'robert.kim@globalcorp.com', role: 'Admin' as const, title: 'Director of Operations' },
      { firstName: 'Maria', lastName: 'Garcia', email: 'maria.garcia@globalcorp.com', role: 'Admin' as const, title: 'VP Sales' },
      { firstName: 'James', lastName: 'Wilson', email: 'james.wilson@globalcorp.com', role: 'User' as const, title: 'Operations Manager' }
    ],
    'customer-004': [ // InnovateTech
      { firstName: 'Sarah', lastName: 'Johnson', email: 'sarah.j@innovatetech.com', role: 'Admin' as const, title: 'CEO' },
      { firstName: 'Alex', lastName: 'Turner', email: 'alex.turner@innovatetech.com', role: 'User' as const, title: 'Tech Lead' }
    ],
    'customer-005': [ // FinancePlus
      { firstName: 'Amanda', lastName: 'Davis', email: 'amanda.davis@financeplus.com', role: 'Admin' as const, title: 'CFO' },
      { firstName: 'Tom', lastName: 'Brown', email: 'tom.brown@financeplus.com', role: 'User' as const, title: 'Financial Analyst' }
    ]
  };
  
  // Auto-generate recipients when customers are selected
  React.useEffect(() => {
    const autoRecipients = selectedCustomers.flatMap(customerId => {
      const customer = mockCustomers.find(c => c.id === customerId);
      const contacts = mockAccountContacts[customerId as keyof typeof mockAccountContacts] || [];
      
      return contacts.map((contact, index) => ({
        id: `${customerId}-${index}`,
        firstName: contact.firstName,
        lastName: contact.lastName,
        email: contact.email,
        role: contact.role,
        title: contact.title,
        accountId: customerId,
        accountName: customer?.name || 'Unknown Account',
        source: 'auto' as const
      }));
    });
    
    // Keep manual recipients and add new auto recipients
    setRecipients(prev => {
      const manualRecipients = prev.filter(r => r.source === 'manual');
      return [...manualRecipients, ...autoRecipients];
    });
    
    // Show recipient list if there are selected customers
    if (selectedCustomers.length > 0) {
      setShowRecipientList(true);
    }
  }, [selectedCustomers]);
  
  // Mock customer and competitor data
  const mockCustomers = [
    { id: 'customer-001', name: 'MarketingCorp', tier: 'Growth', status: 'Active' },
    { id: 'customer-002', name: 'TechStart Inc', tier: 'Starter', status: 'Active' },
    { id: 'customer-003', name: 'GlobalCorp', tier: 'Enterprise', status: 'Active' },
    { id: 'customer-004', name: 'InnovateTech', tier: 'Starter', status: 'Onboarding' },
    { id: 'customer-005', name: 'FinancePlus', tier: 'Growth', status: 'At Risk' },
    { id: 'customer-006', name: 'DataFlow Systems', tier: 'Enterprise', status: 'Active' },
    { id: 'customer-007', name: 'CloudScale Inc', tier: 'Growth', status: 'Active' },
    { id: 'customer-008', name: 'AutomateMe', tier: 'Starter', status: 'Active' },
    { id: 'customer-009', name: 'SecureNet', tier: 'Enterprise', status: 'Active' },
    { id: 'customer-010', name: 'ScaleUp Solutions', tier: 'Growth', status: 'Active' },
    { id: 'customer-011', name: 'DevOps Pro', tier: 'Starter', status: 'Active' },
    { id: 'customer-012', name: 'Analytics Plus', tier: 'Growth', status: 'At Risk' }
  ];
  
  const mockCompetitors = [
    { id: 'comp-001', name: 'Salesforce', category: 'CRM Platform', marketCap: 'Large' },
    { id: 'comp-002', name: 'HubSpot', category: 'Marketing Automation', marketCap: 'Medium' },
    { id: 'comp-003', name: 'Pipedrive', category: 'Sales CRM', marketCap: 'Small' },
    { id: 'comp-004', name: 'Marketo', category: 'Marketing Automation', marketCap: 'Medium' },
    { id: 'comp-005', name: 'Pardot', category: 'B2B Marketing', marketCap: 'Large' },
    { id: 'comp-006', name: 'ActiveCampaign', category: 'Email Marketing', marketCap: 'Small' },
    { id: 'comp-007', name: 'Mailchimp', category: 'Email Marketing', marketCap: 'Medium' },
    { id: 'comp-008', name: 'ConvertKit', category: 'Creator Marketing', marketCap: 'Small' },
    { id: 'comp-009', name: 'Constant Contact', category: 'Email Marketing', marketCap: 'Small' },
    { id: 'comp-010', name: 'Zoho CRM', category: 'CRM Platform', marketCap: 'Medium' },
    { id: 'comp-011', name: 'Monday.com', category: 'Project Management', marketCap: 'Medium' },
    { id: 'comp-012', name: 'Asana', category: 'Project Management', marketCap: 'Medium' }
  ];
  
  // Filter functions
  const filteredCustomers = mockCustomers.filter(customer => 
    customer.name.toLowerCase().includes(customerSearchQuery.toLowerCase()) ||
    customer.tier.toLowerCase().includes(customerSearchQuery.toLowerCase()) ||
    customer.status.toLowerCase().includes(customerSearchQuery.toLowerCase())
  );
  
  const filteredCompetitors = mockCompetitors.filter(competitor => 
    competitor.name.toLowerCase().includes(competitorSearchQuery.toLowerCase()) ||
    competitor.category.toLowerCase().includes(competitorSearchQuery.toLowerCase()) ||
    competitor.marketCap.toLowerCase().includes(competitorSearchQuery.toLowerCase())
  );

  useEffect(() => {
    // Load selected accounts from localStorage if coming from customers page
    const selectedAccountIds = JSON.parse(localStorage.getItem('selectedAccountsForAgent') || '[]');
    
    if (entryPoint === 'customers' && selectedAccountIds.length > 0) {
      // Coming from customers page - skip category selection, go straight to customer-facing
      setAgentCategory('customer-facing');
      setStep('select');
      
      // Mock account data - in real app, this would come from API
      const mockAccounts = [
        { id: 'account-001', company_name: 'MarketingCorp', account_tier: 'Growth', status: 'Active', primary_contact: 'John Smith' },
        { id: 'account-002', company_name: 'TechStart Inc', account_tier: 'Starter', status: 'Active', primary_contact: 'Lisa Wong' },
        { id: 'account-003', company_name: 'GlobalCorp', account_tier: 'Enterprise', status: 'Active', primary_contact: 'Robert Kim' },
        { id: 'account-004', company_name: 'InnovateTech', account_tier: 'Starter', status: 'Onboarding', primary_contact: 'Sarah Johnson' },
        { id: 'account-005', company_name: 'FinancePlus', account_tier: 'Growth', status: 'At Risk', primary_contact: 'Amanda Davis' }
      ];

      const accounts = mockAccounts.filter(account => selectedAccountIds.includes(account.id));
      setSelectedAccounts(accounts);
      
      // Pre-populate Target Customers with selected accounts
      const preselectedCustomerIds = accounts.map(account => {
        // Map account IDs to customer IDs (in real app, this would be based on actual data relationships)
        const customerMapping = {
          'account-001': 'customer-001', // MarketingCorp
          'account-002': 'customer-002', // TechStart Inc
          'account-003': 'customer-003', // GlobalCorp
          'account-004': 'customer-004', // InnovateTech
          'account-005': 'customer-005'  // FinancePlus
        };
        return customerMapping[account.id as keyof typeof customerMapping];
      }).filter(Boolean);
      
      setSelectedCustomers(preselectedCustomerIds);
    } else {
      // Coming from agents dashboard - start with category selection
      setStep('category');
      setAgentCategory(null);
      setSelectedAccounts([]);
    }
  }, [entryPoint]);

  // Generate email templates based on agent type and configuration
  const generateEmailTemplates = () => {
    if (agentCategory === 'research') {
      // Don't generate email templates for research agents
      return;
    }
    
    const agent = availableAgents.find(a => a.id === selectedAgent);
    if (!agent) return;

    // Analyze example email for tone if provided
    const toneAdjustment = exampleEmail ? 
      `Following the tone and style from this example: "${exampleEmail.substring(0, 200)}..."` : 
      `Using a ${agentConfig.tone} tone with ${agentConfig.message_style} messaging`;

    const templates = {
      initial_outreach: exampleEmail ? 
        // If example provided, adapt its style
        `Hi {{contact_name}},

${exampleEmail.includes('Hope') || exampleEmail.includes('hope') ? 'I hope this finds you well.' : 'I wanted to reach out to you.'} I've been reviewing {{company_name}}'s account and ${agent.type === 'Renewal Specialist' ? 'wanted to discuss your upcoming renewal' : agent.type === 'Health Specialist' ? 'noticed some optimization opportunities' : agent.type === 'Onboarding Specialist' ? 'wanted to check on your onboarding progress' : 'see how we can help drive growth'}.

${agentConfig.purpose ? `Specifically, I'd like to ${agentConfig.purpose.toLowerCase()}.` : ''}

Would you have time for a brief call this week?

${exampleEmail.includes('Best') ? 'Best regards,' : exampleEmail.includes('Thanks') ? 'Thanks,' : 'Best,'}
{{agent_name}}` :
        // Default template
        `Hi {{contact_name}},

I hope this message finds you well. I'm reaching out because I've been reviewing {{company_name}}'s account and wanted to discuss ${agent.type === 'Renewal Specialist' ? 'your upcoming renewal and how we can continue supporting your success' : agent.type === 'Health Specialist' ? 'some opportunities to optimize your platform usage' : agent.type === 'Onboarding Specialist' ? 'your onboarding progress and next steps' : 'some growth opportunities for your team'}.

${agentConfig.purpose ? `Specifically, I'd like to ${agentConfig.purpose.toLowerCase()}.` : ''}

Would you have 15 minutes this week for a quick call?

Best regards,
{{agent_name}}`,

      follow_up_1: `Hi {{contact_name}},

I wanted to follow up on my previous message about ${agent.type === 'Renewal Specialist' ? 'your renewal planning' : agent.type === 'Health Specialist' ? 'optimizing your platform usage' : agent.type === 'Onboarding Specialist' ? 'your onboarding journey' : 'growth opportunities'}.

I've prepared some insights specific to {{company_name}}'s usage patterns that could be valuable for your team.

Would you prefer a quick call or should I send over the analysis?

Best,
{{agent_name}}`,

      follow_up_2: `Hi {{contact_name}},

I don't want to overwhelm your inbox, but I believe there's a real opportunity to ${agent.type === 'Renewal Specialist' ? 'ensure a smooth renewal process' : agent.type === 'Health Specialist' ? 'improve your platform ROI' : agent.type === 'Onboarding Specialist' ? 'accelerate your time-to-value' : 'unlock additional value from the platform'}.

If now isn't the right time, could you suggest when might work better?

Thanks,
{{agent_name}}`,

      meeting_request: `Hi {{contact_name}},

Thank you for your interest! I'd love to schedule a brief meeting to discuss ${agent.type === 'Renewal Specialist' ? 'your renewal and future goals' : agent.type === 'Health Specialist' ? 'optimization strategies' : agent.type === 'Onboarding Specialist' ? 'your implementation roadmap' : 'growth opportunities'}.

I have availability:
- Tomorrow at 2 PM
- Thursday at 10 AM  
- Friday at 3 PM

Which works best for you?

Looking forward to our conversation,
{{agent_name}}`,

      final_attempt: `Hi {{contact_name}},

This will be my final outreach regarding ${agent.type === 'Renewal Specialist' ? 'your upcoming renewal discussion' : agent.type === 'Health Specialist' ? 'platform optimization opportunities' : agent.type === 'Onboarding Specialist' ? 'your onboarding support' : 'growth strategies for your team'}.

If you'd like to connect in the future, please don't hesitate to reach out. I'm here whenever you're ready.

Best of luck with everything,
{{agent_name}}`
    };

    setEmailTemplates(templates);
    setShowEmailTemplates(true);
    setTemplatesExpanded(true);
  };
  
  // Context-aware regenerate function
  const regenerateTemplates = () => {
    if (agentCategory === 'customer-facing') {
      generateEmailTemplates();
    }
    // For research agents, we could regenerate research prompts or analysis frameworks here
  };
  
  // Recipient management functions
  const addManualRecipient = () => {
    if (!newRecipient.firstName || !newRecipient.lastName || !newRecipient.email) {
      return;
    }
    
    const recipient = {
      id: `manual-${Date.now()}`,
      firstName: newRecipient.firstName,
      lastName: newRecipient.lastName,
      email: newRecipient.email,
      role: newRecipient.role,
      title: newRecipient.title,
      accountId: newRecipient.accountId,
      accountName: newRecipient.accountName,
      source: 'manual' as const
    };
    
    setRecipients(prev => [...prev, recipient]);
    setNewRecipient({
      firstName: '',
      lastName: '',
      email: '',
      role: 'User',
      title: '',
      accountId: '',
      accountName: ''
    });
    setShowAddRecipient(false);
  };
  
  const removeRecipient = (recipientId: string) => {
    setRecipients(prev => prev.filter(r => r.id !== recipientId));
  };
  
  const updateRecipient = (recipientId: string, updates: Partial<typeof recipients[0]>) => {
    setRecipients(prev => prev.map(r => r.id === recipientId ? { ...r, ...updates } : r));
  };
  
  // Individual template rewrite function
  const rewriteTemplate = (templateKey: string) => {
    const agent = availableAgents.find(a => a.id === selectedAgent);
    if (!agent) return;

    const currentTemplate = emailTemplates[templateKey as keyof typeof emailTemplates];
    if (!currentTemplate) return;

    // Analyze the current template and rewrite it
    const toneAdjustment = exampleEmail ? 
      `Following the tone and style from this example: "${exampleEmail.substring(0, 200)}..."` : 
      `Using a ${agentConfig.tone} tone with ${agentConfig.message_style} messaging`;

    let rewrittenTemplate = '';
    
    switch (templateKey) {
      case 'initial_outreach':
        rewrittenTemplate = exampleEmail ? 
          // Rewrite based on example email style
          `Hi {{contact_name}},

${exampleEmail.includes('Hope') || exampleEmail.includes('hope') ? 'I hope you\'re doing well.' : 'I wanted to reach out to you personally.'} I\'ve been looking into {{company_name}}\'s account and ${agent.type === 'Renewal Specialist' ? 'wanted to discuss your renewal timeline' : agent.type === 'Health Specialist' ? 'identified some growth opportunities' : agent.type === 'Onboarding Specialist' ? 'wanted to ensure your implementation is on track' : 'see how we can accelerate your success'}.

${agentConfig.purpose ? `I\'d specifically like to help with ${agentConfig.purpose.toLowerCase()}.` : ''}

Would you be available for a brief conversation this week?

${exampleEmail.includes('Best') ? 'Best regards,' : exampleEmail.includes('Thanks') ? 'Thanks,' : 'Best,'}\n{{agent_name}}` :
          // Default rewrite
          `Hi {{contact_name}},

I hope this finds you well. I\'ve been analyzing {{company_name}}\'s usage and wanted to share some ${agent.type === 'Renewal Specialist' ? 'renewal insights that could benefit your team' : agent.type === 'Health Specialist' ? 'optimization opportunities I discovered' : agent.type === 'Onboarding Specialist' ? 'implementation best practices' : 'growth strategies tailored to your goals'}.

${agentConfig.purpose ? `Particularly around ${agentConfig.purpose.toLowerCase()}.` : ''}

Would you have 15 minutes this week to discuss?

Best regards,\n{{agent_name}}`;
        break;
      
      case 'follow_up_1':
        rewrittenTemplate = `Hi {{contact_name}},

I wanted to circle back on my previous message regarding ${agent.type === 'Renewal Specialist' ? 'your upcoming renewal' : agent.type === 'Health Specialist' ? 'platform optimization' : agent.type === 'Onboarding Specialist' ? 'your implementation' : 'growth opportunities'}.

I\'ve put together some specific recommendations for {{company_name}} that I think you\'ll find valuable.

Would you prefer a quick call, or should I send over the details?

Best,\n{{agent_name}}`;
        break;
      
      case 'follow_up_2':
        rewrittenTemplate = `Hi {{contact_name}},

I know your inbox is busy, but I wanted to reach out once more about ${agent.type === 'Renewal Specialist' ? 'ensuring a smooth renewal process' : agent.type === 'Health Specialist' ? 'maximizing your platform value' : agent.type === 'Onboarding Specialist' ? 'completing your successful onboarding' : 'unlocking additional growth potential'}.

If the timing isn\'t right now, when would be a better time to connect?

Thanks for your time,\n{{agent_name}}`;
        break;
      
      case 'meeting_request':
        rewrittenTemplate = `Hi {{contact_name}},

Great to hear from you! I\'d love to schedule a brief discussion about ${agent.type === 'Renewal Specialist' ? 'your renewal strategy and future goals' : agent.type === 'Health Specialist' ? 'optimization opportunities' : agent.type === 'Onboarding Specialist' ? 'your implementation roadmap' : 'growth acceleration strategies'}.

I have these times available:\n- Tomorrow at 3 PM\n- Thursday at 11 AM\n- Friday at 2 PM

Which works best for your schedule?

Looking forward to our conversation,\n{{agent_name}}`;
        break;
      
      case 'final_attempt':
        rewrittenTemplate = `Hi {{contact_name}},

This will be my final outreach, as I don\'t want to overwhelm you with messages.

I genuinely believe there\'s an opportunity to ${agent.type === 'Renewal Specialist' ? 'ensure your renewal goes smoothly and delivers maximum value' : agent.type === 'Health Specialist' ? 'significantly improve your platform ROI' : agent.type === 'Onboarding Specialist' ? 'accelerate your time-to-value' : 'drive meaningful growth for your team'}.

If you\'d like to explore this, I\'m here to help. Otherwise, I wish you continued success.

Best regards,\n{{agent_name}}`;
        break;
    }
    
    setEmailTemplates({
      ...emailTemplates,
      [templateKey]: rewrittenTemplate
    });
  };


  // Compact pill display component (similar to competitor flow)
  const renderCompactPills = (
    items: string[], 
    onRemove: (index: number) => void, 
    showAll: boolean, 
    setShowAll: (show: boolean) => void,
    colorClasses: string,
    limit: number = 5
  ) => {
    const visibleItems = showAll ? items : items.slice(0, limit);
    const remainingCount = items.length - limit;
    
    return (
      <div className="flex flex-wrap gap-2 items-center">
        {visibleItems.map((item, index) => (
          <span
            key={index}
            className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${colorClasses} border`}
          >
            {item}
            <button
              onClick={() => onRemove(index)}
              className="ml-2 text-current hover:text-red-600 transition-colors"
            >
              ×
            </button>
          </span>
        ))}
        {!showAll && remainingCount > 0 && (
          <button
            onClick={() => setShowAll(true)}
            className="px-3 py-1 text-sm text-gray-500 hover:text-gray-700 border border-gray-300 rounded-full transition-colors"
          >
            +{remainingCount} more
          </button>
        )}
        {showAll && items.length > limit && (
          <button
            onClick={() => setShowAll(false)}
            className="px-3 py-1 text-sm text-gray-500 hover:text-gray-700 border border-gray-300 rounded-full transition-colors"
          >
            Show less
          </button>
        )}
      </div>
    );
  };

  const customerFacingAgents = [
    {
      id: 'agent-renewal-001',
      name: 'Renewal Outreach Agent',
      type: 'Renewal Specialist',
      description: 'Proactively contacts accounts approaching renewal dates',
      icon: Target,
      color: 'blue'
    },
    {
      id: 'agent-health-001', 
      name: 'Health Recovery Agent',
      type: 'Health Specialist',
      description: 'Engages with at-risk accounts to improve health scores',
      icon: Activity,
      color: 'red'
    },
    {
      id: 'agent-onboard-001',
      name: 'Onboarding Agent', 
      type: 'Onboarding Specialist',
      description: 'Guides new customers through product adoption',
      icon: Users,
      color: 'green'
    },
    {
      id: 'agent-expansion-001',
      name: 'Expansion Agent',
      type: 'Growth Specialist', 
      description: 'Identifies and pursues expansion opportunities',
      icon: TrendingUp,
      color: 'yellow'
    }
  ];

  const researchAgents = [
    {
      id: 'research-competitive-001',
      name: 'Competitive Intelligence Agent',
      type: 'Research Analyst',
      description: 'Monitors competitor activities, pricing changes, and market positioning',
      icon: BarChart3,
      color: 'purple'
    },
    {
      id: 'research-market-001',
      name: 'Market Research Agent',
      type: 'Market Analyst',
      description: 'Analyzes market trends, industry reports, and customer sentiment',
      icon: PieChart,
      color: 'indigo'
    },
    {
      id: 'research-product-001',
      name: 'Product Intelligence Agent',
      type: 'Product Analyst',
      description: 'Tracks product usage patterns, feature adoption, and user feedback',
      icon: Zap,
      color: 'orange'
    },
    {
      id: 'research-content-001',
      name: 'Content Strategy Agent',
      type: 'Content Analyst',
      description: 'Analyzes content performance and identifies optimization opportunities',
      icon: FileText,
      color: 'teal'
    }
  ];

  const availableAgents = agentCategory === 'customer-facing' ? customerFacingAgents : researchAgents;

  const handleNext = () => {
    if (step === 'category' && agentCategory) {
      setStep('select');
    } else if (step === 'select' && selectedAgent) {
      setStep('configure');
    } else if (step === 'configure') {
      // For research agents, require purpose (research focus areas)
      // For customer-facing agents, purpose is optional (handled via AI configuration)
      if (agentCategory === 'research' && !agentConfig.purpose) {
        return; // Don't proceed if research agent has no purpose
      }
      setStep('confirm');
    }
  };

  const handleBack = () => {
    if (step === 'select') {
      // If we came from customers page, go back to customers
      if (entryPoint === 'customers') {
        window.location.href = '/customers';
      } else {
        // Otherwise go back to category selection
        setStep('category');
      }
    } else if (step === 'configure') {
      setStep('select');
    } else if (step === 'confirm') {
      setStep('configure');
    } else if (step === 'category') {
      // Always go back to agents dashboard
      window.location.href = '/agents';
    }
  };

  const handleCreateAgent = () => {
    const agent = availableAgents.find(a => a.id === selectedAgent);
    if (!agent) return;

    // Create agent data
    const newAgent = {
      id: selectedAgent,
      name: agent.name,
      type: agent.type,
      description: agent.description,
      status: 'active',
      created_at: new Date().toISOString(),
      assigned_accounts: agentCategory === 'customer-facing' ? selectedAccounts.length : 0,
      total_contacts: 0,
      success_rate: 0,
      last_activity: new Date().toISOString(),
      category: agentCategory,
      configuration: agentConfig,
      performance: agentCategory === 'research' ? {
        emails_sent: 0,
        responses_received: 0,
        meetings_scheduled: 0,
        deals_influenced: 0,
        reports_generated: 0,
        insights_discovered: 0
      } : {
        emails_sent: 0,
        responses_received: 0,
        meetings_scheduled: 0,
        deals_influenced: 0
      }
    };

    // Store agent in localStorage
    const existingAgents = JSON.parse(localStorage.getItem('activeAgents') || '[]');
    existingAgents.push(newAgent);
    localStorage.setItem('activeAgents', JSON.stringify(existingAgents));

    // Clear selected accounts if any
    localStorage.removeItem('selectedAccountsForAgent');

    // Show success and redirect
    const accountText = agentCategory === 'customer-facing' && selectedAccounts.length > 0 
      ? ` for ${selectedAccounts.length} account${selectedAccounts.length !== 1 ? 's' : ''}` 
      : '';
    alert(`Successfully created ${agent.name}${accountText}!`);
    window.location.href = '/agents';
  };

  const getStepColor = (currentStep: string) => {
    // Skip category step if coming from customers page (with selected accounts)
    const stepOrder = selectedAccounts.length > 0 
      ? ['select', 'configure', 'confirm']
      : ['category', 'select', 'configure', 'confirm'];
    const currentIndex = stepOrder.indexOf(step);
    const checkIndex = stepOrder.indexOf(currentStep);
    
    if (checkIndex < currentIndex) return 'bg-green-500';
    if (checkIndex === currentIndex) return 'bg-blue-500';
    return 'bg-gray-300';
  };

  return (
    <div className="min-h-screen pt-6" style={{ background: '#f8fafc' }}>
      <div className="p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center space-x-4">
              <button 
                onClick={() => window.location.href = entryPoint === 'customers' ? '/customers' : '/agents'}
                className="p-2 rounded-lg transition-colors text-gray-400 hover:text-gray-600 hover:bg-white"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Create AI Agent</h1>
                <p className="text-gray-600">
                  {selectedAccounts.length > 0 
                    ? `Configure an AI agent for ${selectedAccounts.length} selected account${selectedAccounts.length !== 1 ? 's' : ''}`
                    : 'Create a new AI agent for your team'
                  }
                </p>
              </div>
            </div>
          </div>

          {/* Progress Steps */}
          <div className="flex items-center justify-center mb-8">
            <div className="flex items-center space-x-4">
              {selectedAccounts.length === 0 && (
                <>
                  <div className="flex items-center space-x-2">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${getStepColor('category')}`}>
                      1
                    </div>
                    <span className="text-sm font-medium text-gray-700">Choose Type</span>
                  </div>
                  <div className="w-12 h-1 bg-gray-200 rounded">
                    <div className={`h-1 rounded transition-all duration-300 ${step === 'select' || step === 'configure' || step === 'confirm' ? 'bg-blue-500 w-full' : 'bg-gray-200 w-0'}`}></div>
                  </div>
                </>
              )}
              <div className="flex items-center space-x-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${getStepColor('select')}`}>
                  {selectedAccounts.length > 0 ? '1' : '2'}
                </div>
                <span className="text-sm font-medium text-gray-700">Select Agent</span>
              </div>
              <div className="w-12 h-1 bg-gray-200 rounded">
                <div className={`h-1 rounded transition-all duration-300 ${step === 'configure' || step === 'confirm' ? 'bg-blue-500 w-full' : 'bg-gray-200 w-0'}`}></div>
              </div>
              <div className="flex items-center space-x-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${getStepColor('configure')}`}>
                  {selectedAccounts.length > 0 ? '2' : '3'}
                </div>
                <span className="text-sm font-medium text-gray-700">Configure</span>
              </div>
              <div className="w-12 h-1 bg-gray-200 rounded">
                <div className={`h-1 rounded transition-all duration-300 ${step === 'confirm' ? 'bg-blue-500 w-full' : 'bg-gray-200 w-0'}`}></div>
              </div>
              <div className="flex items-center space-x-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${getStepColor('confirm')}`}>
                  {selectedAccounts.length > 0 ? '3' : '4'}
                </div>
                <span className="text-sm font-medium text-gray-700">Confirm</span>
              </div>
            </div>
          </div>

          {/* Selected Accounts Summary - Only show when accounts are selected */}
          {selectedAccounts.length > 0 && (
            <div className="bg-white border border-gray-200 rounded-lg p-4 mb-6">
              <div className="flex items-center space-x-3 mb-3">
                <Building className="w-5 h-5 text-gray-400" />
                <h3 className="font-medium text-gray-900">Selected Accounts ({selectedAccounts.length})</h3>
              </div>
              <div className="flex flex-wrap gap-2">
                {selectedAccounts.map((account) => (
                  <div key={account.id} className="bg-gray-100 px-3 py-1 rounded-lg text-sm">
                    <span className="font-medium">{account.company_name}</span>
                    <span className="text-gray-500 ml-1">({account.account_tier})</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Main Content */}
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            {/* Step 0: Category Selection */}
            {step === 'category' && (
              <div>
                <div className="text-center mb-6">
                  <h4 className="text-xl font-semibold text-gray-900 mb-2">Choose Agent Category</h4>
                  <p className="text-gray-600">Select the type of AI agent you want to create</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <button
                    onClick={() => setAgentCategory('customer-facing')}
                    className={`relative p-8 border-2 rounded-lg text-left transition-all duration-200 hover:shadow-md ${
                      agentCategory === 'customer-facing'
                        ? 'border-blue-500 bg-blue-50 shadow-sm'
                        : 'border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50'
                    }`}
                  >
                    {/* Selection Indicator */}
                    {agentCategory === 'customer-facing' && (
                      <div className="absolute top-4 right-4">
                        <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        </div>
                      </div>
                    )}
                    
                    {/* Category Header */}
                    <div className="flex items-center space-x-4 mb-4">
                      <div className="w-16 h-16 bg-blue-500 rounded-lg flex items-center justify-center">
                        <Users className="w-8 h-8 text-white" />
                      </div>
                      <div>
                        <h5 className="text-xl font-semibold text-gray-900 mb-2">Customer-Facing Agent</h5>
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                          Direct Customer Interaction
                        </span>
                      </div>
                    </div>
                    
                    {/* Category Description */}
                    <p className="text-gray-600 mb-4">
                      Agents that directly communicate with your customers for renewals, health checks, onboarding, and expansion opportunities.
                    </p>
                    
                    {/* Features */}
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-gray-600">Email and phone outreach</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-gray-600">Meeting scheduling</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-gray-600">Account assignment and tracking</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span className="text-gray-600">Success rate monitoring</span>
                      </div>
                    </div>
                  </button>

                  <button
                    onClick={() => setAgentCategory('research')}
                    className={`relative p-8 border-2 rounded-lg text-left transition-all duration-200 hover:shadow-md ${
                      agentCategory === 'research'
                        ? 'border-purple-500 bg-purple-50 shadow-sm'
                        : 'border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50'
                    }`}
                  >
                    {/* Selection Indicator */}
                    {agentCategory === 'research' && (
                      <div className="absolute top-4 right-4">
                        <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        </div>
                      </div>
                    )}
                    
                    {/* Category Header */}
                    <div className="flex items-center space-x-4 mb-4">
                      <div className="w-16 h-16 bg-purple-500 rounded-lg flex items-center justify-center">
                        <BarChart3 className="w-8 h-8 text-white" />
                      </div>
                      <div>
                        <h5 className="text-xl font-semibold text-gray-900 mb-2">Research Agent</h5>
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">
                          Analysis & Intelligence
                        </span>
                      </div>
                    </div>
                    
                    {/* Category Description */}
                    <p className="text-gray-600 mb-4">
                      Agents that analyze data, monitor competitors, track market trends, and generate insights to inform your strategy.
                    </p>
                    
                    {/* Features */}
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span className="text-gray-600">Market research and analysis</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span className="text-gray-600">Competitive intelligence</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span className="text-gray-600">Report generation</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span className="text-gray-600">Insight discovery</span>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            )}

            {/* Step 1: Agent Selection */}
            {step === 'select' && (
              <div>
                <div className="text-center mb-6">
                  <h4 className="text-xl font-semibold text-gray-900 mb-2">Choose Your AI Agent Type</h4>
                  <p className="text-gray-600">Select the specialist agent that best matches your outreach goals</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {availableAgents.map((agent) => {
                    const isSelected = selectedAgent === agent.id;
                    const IconComponent = agent.icon;
                    const colorClasses = {
                      blue: 'bg-blue-500',
                      red: 'bg-red-500', 
                      green: 'bg-green-500',
                      yellow: 'bg-yellow-500',
                      purple: 'bg-purple-500',
                      indigo: 'bg-indigo-500',
                      orange: 'bg-orange-500',
                      teal: 'bg-teal-500'
                    }[agent.color] || 'bg-gray-500';
                    
                    return (
                      <button
                        key={agent.id}
                        onClick={() => setSelectedAgent(agent.id)}
                        className={`relative p-6 border-2 rounded-lg text-left transition-all duration-200 hover:shadow-md ${
                          isSelected 
                            ? 'border-blue-500 bg-blue-50 shadow-sm' 
                            : 'border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50'
                        }`}
                      >
                        {/* Selection Indicator */}
                        {isSelected && (
                          <div className="absolute top-4 right-4">
                            <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                            </div>
                          </div>
                        )}
                        
                        {/* Agent Header */}
                        <div className="flex items-start space-x-4 mb-4">
                          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClasses}`}>
                            <IconComponent className="w-6 h-6 text-white" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <h5 className="font-semibold text-gray-900 text-lg mb-1">{agent.name}</h5>
                            <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              {agent.type}
                            </span>
                          </div>
                        </div>
                        
                        {/* Agent Description */}
                        <p className="text-gray-600 text-sm">
                          {agent.description}
                        </p>
                      </button>
                    );
                  })}
                </div>
              </div>
            )}

            {/* Step 2: Configuration */}
            {step === 'configure' && selectedAgent && (
              <div>
                <div className="text-center mb-6">
                  <div className="mb-3">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                      {agentCategory === 'research' ? 'Research Agent' : 'Customer-Facing Agent'}
                    </span>
                  </div>
                  <h4 className="text-xl font-semibold text-gray-900 mb-2">Configure Your AI Agent</h4>
                  <p className="text-gray-600">
                    {agentCategory === 'customer-facing' 
                      ? 'Set up your agent\'s behavior and outreach strategy'
                      : 'Configure your agent\'s research parameters and reporting'
                    }
                  </p>
                </div>


                {/* Configuration Form */}
                <div className="space-y-6">
                  {/* Customer-Facing Configuration */}
                  {agentCategory === 'customer-facing' && (
                    <>
                      {/* Section 1: Agent Configuration */}
                      <div className="mb-6">
                        <div className="mb-4">
                          <h5 className="text-lg font-semibold text-gray-900 mb-1">Agent Configuration</h5>
                          <p className="text-sm text-gray-600">Set up your agent's behavior and outreach strategy</p>
                        </div>

                        {/* AI Configuration Section - Matching Research Agent Flow */}
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-4 mb-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                              <Bot className="w-5 h-5 text-white" />
                            </div>
                            <div>
                              <h6 className="font-medium text-blue-900">AI-Powered Configuration</h6>
                              <p className="text-sm text-blue-700 mt-1">
                                Optimize your outreach strategy with AI recommendations
                              </p>
                            </div>
                          </div>
                          {!aiGenerated ? (
                            <button
                              onClick={() => {
                                // Generate optimized configuration based on agent type and user input
                                const agent = availableAgents.find(a => a.id === selectedAgent);
                                if (!agent) return;
                                
                                let optimizedConfig = { ...agentConfig };
                                
                                // AI optimization based on agent type
                                if (agent.type === 'Renewal Specialist') {
                                  optimizedConfig = {
                                    ...optimizedConfig,
                                    outreach_frequency: 'weekly',
                                    max_attempts: 4,
                                    tone: 'professional',
                                    message_style: 'personalized'
                                  };
                                } else if (agent.type === 'Health Specialist') {
                                  optimizedConfig = {
                                    ...optimizedConfig,
                                    outreach_frequency: '3days',
                                    max_attempts: 3,
                                    tone: 'friendly',
                                    message_style: 'detailed'
                                  };
                                } else if (agent.type === 'Onboarding Specialist') {
                                  optimizedConfig = {
                                    ...optimizedConfig,
                                    outreach_frequency: 'daily',
                                    max_attempts: 5,
                                    tone: 'friendly',
                                    message_style: 'detailed'
                                  };
                                } else if (agent.type === 'Growth Specialist') {
                                  optimizedConfig = {
                                    ...optimizedConfig,
                                    outreach_frequency: 'weekly',
                                    max_attempts: 3,
                                    tone: 'professional',
                                    message_style: 'concise'
                                  };
                                }
                                
                                setAgentConfig(optimizedConfig);
                                setAiGenerated(true);
                              }}
                              className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition-colors flex items-center space-x-2"
                            >
                              <Zap className="w-4 h-4" />
                              <span>AI Optimize</span>
                            </button>
                          ) : (
                            <div className="flex items-center space-x-2 text-green-600">
                              <CheckCircle className="w-5 h-5" />
                              <span className="text-sm font-medium">Configuration Optimized</span>
                            </div>
                          )}
                        </div>
                        
                        {!aiGenerated && (
                          <div className="mt-4">
                            <div className="mb-3">
                              <label className="block text-sm font-medium text-blue-800 mb-2">Outreach Goals (Optional)</label>
                              <textarea
                                value={researchPrompt}
                                onChange={(e) => setResearchPrompt(e.target.value)}
                                placeholder={`e.g., "Focus on accounts with low health scores and upcoming renewals" or "Prioritize quick wins with high-value prospects who haven't engaged recently"`}
                                className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white/50"
                                rows={3}
                              />
                            </div>
                            <div className="text-xs text-blue-700">
                              💡 Describe your outreach strategy for AI-optimized configuration
                            </div>
                          </div>
                        )}
                        
                        {/* Reconfigure Option */}
                        {aiGenerated && (
                          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-2">
                                <Bot className="w-4 h-4 text-blue-600" />
                                <span className="text-sm font-medium text-blue-900">Want to adjust the optimization?</span>
                              </div>
                              <button
                                onClick={() => {
                                  setAiGenerated(false);
                                }}
                                className="text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors"
                              >
                                Reconfigure
                              </button>
                            </div>
                            <p className="text-xs text-blue-700 mt-1">
                              Update your outreach goals to re-optimize the configuration
                            </p>
                          </div>
                        )}
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Outreach Frequency</label>
                          <select
                            value={agentConfig.outreach_frequency}
                            onChange={(e) => setAgentConfig({...agentConfig, outreach_frequency: e.target.value as any})}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="daily">Daily</option>
                            <option value="3days">Every 3 Days</option>
                            <option value="weekly">Weekly</option>
                            <option value="biweekly">Bi-weekly</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Max Attempts</label>
                          <input
                            type="number"
                            value={agentConfig.max_attempts}
                            onChange={(e) => setAgentConfig({...agentConfig, max_attempts: parseInt(e.target.value)})}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            min="1"
                            max="20"
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Tone</label>
                          <select
                            value={agentConfig.tone}
                            onChange={(e) => setAgentConfig({...agentConfig, tone: e.target.value as any})}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="professional">Professional</option>
                            <option value="friendly">Friendly</option>
                            <option value="casual">Casual</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">Message Style</label>
                          <select
                            value={agentConfig.message_style}
                            onChange={(e) => setAgentConfig({...agentConfig, message_style: e.target.value as any})}
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="concise">Concise</option>
                            <option value="detailed">Detailed</option>
                            <option value="personalized">Personalized</option>
                          </select>
                        </div>
                      </div>
                      </div>

                      {/* Section 2: Target Setup */}
                      <div className="border-t border-gray-200 pt-6 mt-6">
                        <div className="mb-4">
                          <h5 className="text-lg font-semibold text-gray-900 mb-1">Target Setup</h5>
                          <p className="text-sm text-gray-600">Configure your target customers and recipients</p>
                        </div>

                        {/* Customer Selection for Customer-Facing Agents - FIXED ORDER */}
                        <div className="border border-gray-200 rounded-lg p-4 mb-6">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h6 className="font-medium text-gray-900">Target Customers</h6>
                            <p className="text-sm text-gray-600 mt-1">
                              Select specific customers to focus on (optional for better targeting)
                            </p>
                          </div>
                          <button
                            onClick={() => setShowCustomerSelection(!showCustomerSelection)}
                            className="px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors flex items-center space-x-1"
                          >
                            {showCustomerSelection ? (
                              <>
                                <ChevronUp className="w-4 h-4" />
                                <span>Hide</span>
                              </>
                            ) : (
                              <>
                                <ChevronDown className="w-4 h-4" />
                                <span>Select Customers</span>
                              </>
                            )}
                          </button>
                        </div>
                        
                        {selectedCustomers.length > 0 && (
                          <div className="mb-4">
                            <div className="flex flex-wrap gap-2">
                              {selectedCustomers.map((customerId) => {
                                const customer = mockCustomers.find(c => c.id === customerId);
                                if (!customer) return null;
                                return (
                                  <div key={customerId} className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm flex items-center space-x-2">
                                    <span>{customer.name}</span>
                                    <button
                                      onClick={() => setSelectedCustomers(prev => prev.filter(id => id !== customerId))}
                                      className="text-blue-600 hover:text-blue-800"
                                    >
                                      ×
                                    </button>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        )}
                        
                        {showCustomerSelection && (
                          <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                            {/* Search Bar */}
                            <div className="mb-4">
                              <div className="relative">
                                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                  <svg className="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                  </svg>
                                </div>
                                <input
                                  type="text"
                                  value={customerSearchQuery}
                                  onChange={(e) => setCustomerSearchQuery(e.target.value)}
                                  placeholder="Search customers by name, tier, or status..."
                                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                              </div>
                            </div>
                            
                            {/* Customer Grid */}
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-64 overflow-y-auto">
                              {filteredCustomers.length > 0 ? (
                                filteredCustomers.map((customer) => (
                                <button
                                  key={customer.id}
                                  onClick={() => {
                                    if (selectedCustomers.includes(customer.id)) {
                                      setSelectedCustomers(prev => prev.filter(id => id !== customer.id));
                                    } else {
                                      setSelectedCustomers(prev => [...prev, customer.id]);
                                    }
                                  }}
                                  className={`p-3 border rounded-lg text-sm text-left transition-all duration-200 ${
                                    selectedCustomers.includes(customer.id)
                                      ? 'border-blue-500 bg-blue-50 text-blue-900'
                                      : 'border-gray-200 bg-white hover:border-gray-300 text-gray-700'
                                  }`}
                                >
                                  <div className="font-medium">{customer.name}</div>
                                  <div className="text-xs opacity-75">{customer.tier} • {customer.status}</div>
                                </button>
                              ))
                              ) : (
                                <div className="col-span-full text-center py-8 text-gray-500">
                                  <div className="text-sm">No customers found matching "{customerSearchQuery}"</div>
                                  <button 
                                    onClick={() => setCustomerSearchQuery('')}
                                    className="text-blue-600 hover:text-blue-700 text-sm mt-1"
                                  >
                                    Clear search
                                  </button>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Recipient List - Auto-generates from selected customers */}
                      {showRecipientList && recipients.length > 0 && (
                        <div className="border border-gray-200 rounded-lg p-4 mb-6">
                          <div className="flex items-center justify-between mb-4">
                            <div>
                              <h6 className="font-medium text-gray-900">Contact Recipients ({recipients.length})</h6>
                              <p className="text-sm text-gray-600 mt-1">
                                Auto-generated from selected accounts. Add manual contacts as needed.
                              </p>
                            </div>
                            <div className="flex items-center space-x-2">
                              <button
                                onClick={() => setShowAddRecipient(!showAddRecipient)}
                                className="px-3 py-2 text-sm font-medium text-green-600 bg-green-50 rounded-lg hover:bg-green-100 transition-colors flex items-center space-x-1"
                              >
                                <Plus className="w-4 h-4" />
                                <span>Add Manual</span>
                              </button>
                              <button
                                onClick={() => setShowRecipientList(false)}
                                className="px-3 py-2 text-sm font-medium text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors flex items-center space-x-1"
                              >
                                <ChevronUp className="w-4 h-4" />
                                <span>Hide</span>
                              </button>
                            </div>
                          </div>

                          {/* Add Manual Recipient Form */}
                          {showAddRecipient && (
                            <div className="border border-gray-200 rounded-lg p-4 mb-4 bg-gray-50">
                              <h6 className="font-medium text-gray-900 mb-3">Add Manual Contact</h6>
                              <div className="grid grid-cols-2 gap-3">
                                <input
                                  type="text"
                                  value={newRecipient.firstName}
                                  onChange={(e) => setNewRecipient({...newRecipient, firstName: e.target.value})}
                                  placeholder="First Name"
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                />
                                <input
                                  type="text"
                                  value={newRecipient.lastName}
                                  onChange={(e) => setNewRecipient({...newRecipient, lastName: e.target.value})}
                                  placeholder="Last Name"
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                />
                                <input
                                  type="email"
                                  value={newRecipient.email}
                                  onChange={(e) => setNewRecipient({...newRecipient, email: e.target.value})}
                                  placeholder="Email Address"
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                />
                                <input
                                  type="text"
                                  value={newRecipient.title}
                                  onChange={(e) => setNewRecipient({...newRecipient, title: e.target.value})}
                                  placeholder="Job Title"
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                />
                                <select
                                  value={newRecipient.role}
                                  onChange={(e) => setNewRecipient({...newRecipient, role: e.target.value as 'Admin' | 'User'})}
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                >
                                  <option value="User">User</option>
                                  <option value="Admin">Admin</option>
                                </select>
                                <input
                                  type="text"
                                  value={newRecipient.accountName}
                                  onChange={(e) => setNewRecipient({...newRecipient, accountName: e.target.value})}
                                  placeholder="Account/Company Name"
                                  className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                />
                              </div>
                              <div className="flex items-center space-x-2 mt-3">
                                <button
                                  onClick={addManualRecipient}
                                  disabled={!newRecipient.firstName || !newRecipient.lastName || !newRecipient.email}
                                  className="px-3 py-2 text-sm font-medium text-white bg-green-500 rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-1"
                                >
                                  <Plus className="w-4 h-4" />
                                  <span>Add Contact</span>
                                </button>
                                <button
                                  onClick={() => setShowAddRecipient(false)}
                                  className="px-3 py-2 text-sm font-medium text-gray-600 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
                                >
                                  Cancel
                                </button>
                              </div>
                            </div>
                          )}

                          {/* Recipients Table */}
                          <div className="overflow-x-auto">
                            <table className="w-full text-sm">
                              <thead>
                                <tr className="border-b border-gray-200">
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Name</th>
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Email</th>
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Title</th>
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Role</th>
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Account</th>
                                  <th className="text-left py-2 px-3 font-medium text-gray-700">Source</th>
                                  <th className="text-right py-2 px-3 font-medium text-gray-700">Actions</th>
                                </tr>
                              </thead>
                              <tbody>
                                {recipients.map((recipient) => (
                                  <tr key={recipient.id} className="border-b border-gray-100">
                                    <td className="py-2 px-3">
                                      <div className="font-medium text-gray-900">{recipient.firstName} {recipient.lastName}</div>
                                    </td>
                                    <td className="py-2 px-3 text-gray-600">{recipient.email}</td>
                                    <td className="py-2 px-3 text-gray-600">{recipient.title}</td>
                                    <td className="py-2 px-3">
                                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                        recipient.role === 'Admin' 
                                          ? 'bg-purple-100 text-purple-800' 
                                          : 'bg-gray-100 text-gray-800'
                                      }`}>
                                        {recipient.role}
                                      </span>
                                    </td>
                                    <td className="py-2 px-3 text-gray-600">{recipient.accountName}</td>
                                    <td className="py-2 px-3">
                                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                        recipient.source === 'auto' 
                                          ? 'bg-blue-100 text-blue-800' 
                                          : 'bg-green-100 text-green-800'
                                      }`}>
                                        {recipient.source}
                                      </span>
                                    </td>
                                    <td className="py-2 px-3 text-right">
                                      {recipient.source === 'manual' && (
                                        <button
                                          onClick={() => removeRecipient(recipient.id)}
                                          className="text-red-600 hover:text-red-800 transition-colors"
                                          title="Remove contact"
                                        >
                                          <X className="w-4 h-4" />
                                        </button>
                                      )}
                                    </td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      )}

                      {showEmailTemplates && templatesExpanded && (
                        <div className="border border-gray-200 rounded-lg p-6 mb-6">
                          <div className="mb-4">
                            <h6 className="font-medium text-gray-900">Email Template Details</h6>
                            <p className="text-sm text-gray-600 mt-1">
                              Edit and customize your generated email templates
                            </p>
                          </div>
                          
                          {/* Combined Workflow + Templates */}
                          <div className="space-y-4">
                            {Object.entries(emailTemplates).map(([key, template], index) => {
                              const templateNames = {
                                initial_outreach: 'Initial Outreach',
                                follow_up_1: 'Follow-up 1', 
                                follow_up_2: 'Follow-up 2',
                                meeting_request: 'Meeting Request',
                                final_attempt: 'Final Attempt'
                              };
                              
                              const dayOffset = index * (agentConfig.outreach_frequency === 'daily' ? 1 : agentConfig.outreach_frequency === '3days' ? 3 : agentConfig.outreach_frequency === 'weekly' ? 7 : 14);
                              
                              return (
                                <div key={key} className="border border-gray-200 rounded-lg overflow-hidden">
                                  <div className="bg-gray-50 border-b border-gray-200 p-4">
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center space-x-3">
                                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm font-medium text-blue-600">
                                          {index + 1}
                                        </div>
                                        <div>
                                          <h7 className="font-medium text-gray-900">{templateNames[key as keyof typeof templateNames]}</h7>
                                          <div className="text-xs text-gray-500 mt-1">
                                            {dayOffset === 0 ? 'Day 1' : `Day ${dayOffset + 1}`} • Email • {agentConfig.tone} tone
                                          </div>
                                        </div>
                                      </div>
                                      <div className="flex items-center space-x-2">
                                        <button
                                          onClick={() => rewriteTemplate(key)}
                                          className="px-2 py-1 text-xs font-medium text-blue-600 bg-blue-50 rounded hover:bg-blue-100 transition-colors flex items-center space-x-1"
                                          title="Rewrite this template with AI"
                                        >
                                          <Bot className="w-3 h-3" />
                                          <span>AI Rewrite</span>
                                        </button>
                                        {editingTemplate === key && (
                                          <button
                                            onClick={() => setEditingTemplate(null)}
                                            className="px-3 py-1 text-sm font-medium text-white bg-green-500 rounded-lg hover:bg-green-600 transition-colors flex items-center space-x-1"
                                          >
                                            <Check className="w-3 h-3" />
                                            <span>Save Changes</span>
                                          </button>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <div className="p-4">
                                    {editingTemplate === key ? (
                                      <textarea
                                        value={template}
                                        onChange={(e) => setEmailTemplates({...emailTemplates, [key]: e.target.value})}
                                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm font-mono"
                                        rows={8}
                                        autoFocus
                                      />
                                    ) : (
                                      <div 
                                        onClick={() => setEditingTemplate(key)}
                                        className="bg-white border border-gray-200 rounded p-3 text-sm font-mono whitespace-pre-wrap max-h-40 overflow-y-auto cursor-text hover:border-blue-300 hover:bg-blue-50/30 transition-colors"
                                        title="Click to edit template"
                                      >
                                        {template}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>

                      {/* Section 3: Email Campaign Setup - FIXED AT BOTTOM */}
                      <div className="border-t border-gray-200 pt-6 mt-6">
                          <div className="mb-4">
                            <h5 className="text-lg font-semibold text-gray-900 mb-1">Email Campaign Setup</h5>
                            <p className="text-sm text-gray-600">Generate and configure your email templates</p>
                          </div>
                          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-4 mb-6">
                            <div className="flex items-center justify-between mb-4">
                              <div className="flex items-center space-x-3">
                                <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                                  <Zap className="w-5 h-5 text-white" />
                                </div>
                                <div>
                                  <h6 className="font-medium text-blue-900">AI Email Template Generation</h6>
                                  <p className="text-sm text-blue-700 mt-1">
                                    Generate a {Math.ceil(agentConfig.max_attempts * (agentConfig.outreach_frequency === 'daily' ? 1 : agentConfig.outreach_frequency === '3days' ? 3 : agentConfig.outreach_frequency === 'weekly' ? 7 : 14))} day email campaign with personalized templates
                                  </p>
                                </div>
                              </div>
                              {!showEmailTemplates ? (
                                <button
                                  onClick={generateEmailTemplates}
                                  className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition-colors flex items-center space-x-2"
                                >
                                  <Zap className="w-4 h-4" />
                                  <span>Generate Templates</span>
                                </button>
                              ) : (
                                <div className="flex items-center space-x-2 text-green-600">
                                  <CheckCircle className="w-5 h-5" />
                                  <span className="text-sm font-medium">Templates Generated</span>
                                </div>
                              )}
                            </div>
                            
                            {/* Example Email Field - Only show if templates not generated */}
                            {!showEmailTemplates && (
                              <div>
                                <label className="block text-sm font-medium text-blue-800 mb-2">
                                  Example Email (Optional)
                                </label>
                                <textarea
                                  value={exampleEmail}
                                  onChange={(e) => setExampleEmail(e.target.value)}
                                  placeholder="Paste an example email that represents your writing style and tone. The AI will match this style when generating templates."
                                  className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm bg-white/50"
                                  rows={4}
                                />
                                <div className="text-xs text-blue-700 mt-2 flex items-center space-x-1">
                                  <Mail className="w-3 h-3" />
                                  <span>💡 Help the AI capture your authentic voice and communication style</span>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </>
                  )}

                  {/* Research Configuration */}
                  {agentCategory === 'research' && (
                    <>
                      {/* AI Research Button */}
                      {/* AI Research Section - Matching Competitor Flow */}
                      <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl border border-purple-200 p-4 mb-6">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 rounded-lg bg-purple-100 flex items-center justify-center">
                              <Zap className="w-5 h-5 text-purple-600" />
                            </div>
                            <div>
                              <h3 className="font-semibold text-gray-900">AI Research Assistant</h3>
                              <p className="text-sm text-gray-600">
                                {showResearchConfig 
                                  ? 'Configuration completed! Review and edit the settings below.' 
                                  : 'Let AI analyze your research needs and auto-configure optimal settings'
                                }
                              </p>
                            </div>
                          </div>
                          
                          {!showResearchConfig && (
                            <button
                              onClick={() => {
                                if (!researchPrompt.trim()) {
                                  // If no prompt, use default configuration
                                  const agentType = selectedAgent;
                                  let defaultConfig = {};
                                  
                                  if (agentType === 'research-competitive-001') {
                                    defaultConfig = {
                                      purpose: 'pricing changes, feature releases, market positioning, competitive threats',
                                      analysis_framework: 'Use competitive benchmarking, Use trend analysis, Use SWOT analysis',
                                      escalation_rules: 'Alert for price changes >10%, Alert for new product launches, Alert for partnership announcements',
                                      business_context: 'B2B SaaS, Growth stage, High-tech'
                                    };
                                  } else if (agentType === 'research-market-001') {
                                    defaultConfig = {
                                      purpose: 'industry trends, market growth, customer sentiment, regulatory changes',
                                      analysis_framework: 'Use trend analysis, Use sentiment analysis, Use statistical comparison',
                                      escalation_rules: 'Alert for market shifts >15%, Alert for regulatory updates, Alert for industry reports',
                                      business_context: 'B2B SaaS, Enterprise focus, High-tech'
                                    };
                                  } else if (agentType === 'research-product-001') {
                                    defaultConfig = {
                                      purpose: 'usage patterns, feature adoption, user engagement, performance metrics',
                                      analysis_framework: 'Use cohort analysis, Use A/B testing insights, Use pattern recognition',
                                      escalation_rules: 'Alert for usage drops >10%, Alert for feature adoption <50%, Alert for user complaints',
                                      business_context: 'B2B SaaS, Product-focused, High-tech'
                                    };
                                  } else {
                                    defaultConfig = {
                                      purpose: 'content performance, seo rankings, engagement metrics, conversion rates',
                                      analysis_framework: 'Use content analysis, Use sentiment analysis, Use trend analysis',
                                      escalation_rules: 'Alert for traffic drops >15%, Alert for engagement decline',
                                      business_context: 'B2B SaaS, Content-focused, High-tech'
                                    };
                                  }
                                  
                                  setAgentConfig({
                                    ...agentConfig,
                                    ...defaultConfig
                                  });
                                  
                                  setShowResearchConfig(true);
                                  setAiGenerated(true);
                                  return;
                                }
                                
                                // Use custom prompt logic
                                const agentType = selectedAgent;
                                const userPrompt = researchPrompt.toLowerCase();
                                let defaultConfig = {};
                                
                                // Base configuration by agent type with prompt customization
                                if (agentType === 'research-competitive-001') {
                                  let focusAreas = ['pricing changes', 'feature releases', 'market positioning'];
                                  let analysisFramework = ['Use competitive benchmarking', 'Use trend analysis'];
                                  let alertTriggers = ['Alert for price changes >10%', 'Alert for new product launches'];
                                  let businessContext = ['B2B SaaS', 'Growth stage', 'High-tech'];
                                  
                                  // Customize based on user prompt
                                  if (userPrompt.includes('pricing') || userPrompt.includes('price')) {
                                    focusAreas.push('pricing strategy', 'discount campaigns');
                                    alertTriggers.push('Alert for price changes >5%', 'Alert for promotional campaigns');
                                  }
                                  if (userPrompt.includes('feature') || userPrompt.includes('product')) {
                                    focusAreas.push('product launches', 'feature updates', 'roadmap changes');
                                    alertTriggers.push('Alert for feature updates', 'Alert for product announcements');
                                  }
                                  if (userPrompt.includes('roadmap') || userPrompt.includes('planning')) {
                                    focusAreas.push('strategic announcements', 'partnership news');
                                    analysisFramework.push('Use strategic analysis', 'Use roadmap correlation');
                                  }
                                  if (userPrompt.includes('enterprise') || userPrompt.includes('b2b')) {
                                    businessContext = ['B2B SaaS', 'Enterprise focus', 'High-tech'];
                                    focusAreas.push('enterprise features', 'integration announcements');
                                  }
                                  
                                  defaultConfig = {
                                    purpose: focusAreas.join(', '),
                                    analysis_framework: analysisFramework.join(', '),
                                    escalation_rules: alertTriggers.join(', '),
                                    business_context: businessContext.join(', ')
                                  };
                                } else if (agentType === 'research-market-001') {
                                  let focusAreas = ['industry trends', 'market growth', 'regulatory changes'];
                                  let analysisFramework = ['Use trend analysis', 'Use sentiment analysis'];
                                  let alertTriggers = ['Alert for market shifts >15%', 'Alert for regulatory updates'];
                                  let businessContext = ['B2B SaaS', 'Growth stage', 'High-tech'];
                                  
                                  if (userPrompt.includes('regulation') || userPrompt.includes('compliance')) {
                                    focusAreas.push('regulatory updates', 'compliance requirements', 'policy changes');
                                    alertTriggers.push('Alert for policy changes', 'Alert for compliance requirements');
                                    analysisFramework.push('Use regulatory analysis');
                                  }
                                  if (userPrompt.includes('sentiment') || userPrompt.includes('opinion')) {
                                    focusAreas.push('customer sentiment', 'brand perception', 'market sentiment');
                                    analysisFramework.push('Use sentiment analysis', 'Use social listening');
                                  }
                                  if (userPrompt.includes('ai') || userPrompt.includes('artificial intelligence')) {
                                    focusAreas.push('ai trends', 'technology adoption', 'ai regulation');
                                    businessContext.push('AI/ML focus');
                                  }
                                  
                                  defaultConfig = {
                                    purpose: focusAreas.join(', '),
                                    analysis_framework: analysisFramework.join(', '),
                                    escalation_rules: alertTriggers.join(', '),
                                    business_context: businessContext.join(', ')
                                  };
                                } else if (agentType === 'research-product-001') {
                                  let focusAreas = ['usage patterns', 'feature adoption', 'user engagement'];
                                  let analysisFramework = ['Use cohort analysis', 'Use A/B testing insights'];
                                  let alertTriggers = ['Alert for usage drops >10%', 'Alert for feature adoption <50%'];
                                  
                                  if (userPrompt.includes('churn') || userPrompt.includes('retention')) {
                                    focusAreas.push('churn indicators', 'retention metrics', 'user satisfaction');
                                    analysisFramework.push('Use churn prediction', 'Use retention analysis');
                                    alertTriggers.push('Alert for churn rate increases', 'Alert for satisfaction drops');
                                  }
                                  if (userPrompt.includes('performance') || userPrompt.includes('speed')) {
                                    focusAreas.push('performance metrics', 'load times', 'error rates');
                                    alertTriggers.push('Alert for performance degradation');
                                  }
                                  
                                  defaultConfig = {
                                    purpose: focusAreas.join(', '),
                                    analysis_framework: analysisFramework.join(', '),
                                    escalation_rules: alertTriggers.join(', '),
                                    business_context: 'B2B SaaS, Product-focused, High-tech'
                                  };
                                } else {
                                  let focusAreas = ['content performance', 'seo rankings', 'engagement metrics'];
                                  let analysisFramework = ['Use content analysis', 'Use SEO analysis'];
                                  
                                  if (userPrompt.includes('seo') || userPrompt.includes('search')) {
                                    focusAreas.push('keyword rankings', 'backlink changes', 'search visibility');
                                    analysisFramework.push('Use SEO tracking', 'Use keyword analysis');
                                  }
                                  
                                  defaultConfig = {
                                    purpose: focusAreas.join(', '),
                                    analysis_framework: analysisFramework.join(', '),
                                    escalation_rules: 'Alert for traffic drops >15%, Alert for engagement decline',
                                    business_context: 'B2B SaaS, Content-focused, High-tech'
                                  };
                                }
                                
                                setAgentConfig({
                                  ...agentConfig,
                                  ...defaultConfig
                                });
                                
                                setShowResearchConfig(true);
                                setAiGenerated(true);
                              }}
                              className="calendly-btn-primary flex items-center space-x-2"
                            >
                              <Zap className="w-4 h-4" />
                              <span>AI Research</span>
                            </button>
                          )}
                          
                          {showResearchConfig && (
                            <div className="flex items-center space-x-2 text-green-600">
                              <CheckCircle className="w-5 h-5" />
                              <span className="text-sm font-medium">Configuration Complete</span>
                            </div>
                          )}
                        </div>
                        
                        {!showResearchConfig && (
                          <div className="mt-4">
                            <div className="mb-3">
                              <label className="block text-sm font-medium text-gray-700 mb-2">Research Focus (Optional)</label>
                              <textarea
                                value={researchPrompt}
                                onChange={(e) => setResearchPrompt(e.target.value)}
                                placeholder={`e.g., "Monitor our top 3 competitors for pricing changes and new feature launches that could impact our Q2 roadmap" or "Track industry sentiment around AI regulation that might affect our compliance strategy"`}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                                rows={3}
                              />
                            </div>
                            <div className="text-xs text-gray-500">
                              💡 Describe specific goals to get customized configuration, or leave blank for defaults
                            </div>
                          </div>
                        )}
                        
                        {/* Reconfigure Option */}
                        {showResearchConfig && (
                          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-2">
                                <Bot className="w-4 h-4 text-blue-600" />
                                <span className="text-sm font-medium text-blue-900">Want to adjust the configuration?</span>
                              </div>
                              <button
                                onClick={() => {
                                  setShowResearchConfig(false);
                                  setAiGenerated(false);
                                }}
                                className="text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors"
                              >
                                Reconfigure
                              </button>
                            </div>
                            <p className="text-xs text-blue-700 mt-1">
                              Update your research focus to regenerate the configuration
                            </p>
                          </div>
                        )}
                      </div>

                      {/* Competitor Selection for Research Agents */}
                      <div className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h6 className="font-medium text-gray-900">Target Competitors</h6>
                            <p className="text-sm text-gray-600 mt-1">
                              Select specific competitors to monitor (optional for focused research)
                            </p>
                          </div>
                          <button
                            onClick={() => setShowCompetitorSelection(!showCompetitorSelection)}
                            className="px-3 py-2 text-sm font-medium text-purple-600 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors flex items-center space-x-1"
                          >
                            {showCompetitorSelection ? (
                              <>
                                <ChevronUp className="w-4 h-4" />
                                <span>Hide</span>
                              </>
                            ) : (
                              <>
                                <ChevronDown className="w-4 h-4" />
                                <span>Select Competitors</span>
                              </>
                            )}
                          </button>
                        </div>
                        
                        {selectedCompetitors.length > 0 && (
                          <div className="mb-4">
                            <div className="flex flex-wrap gap-2">
                              {selectedCompetitors.map((competitorId) => {
                                const competitor = mockCompetitors.find(c => c.id === competitorId);
                                if (!competitor) return null;
                                return (
                                  <div key={competitorId} className="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm flex items-center space-x-2">
                                    <span>{competitor.name}</span>
                                    <button
                                      onClick={() => setSelectedCompetitors(prev => prev.filter(id => id !== competitorId))}
                                      className="text-purple-600 hover:text-purple-800"
                                    >
                                      ×
                                    </button>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        )}
                        
                        {showCompetitorSelection && (
                          <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                            {/* Search Bar */}
                            <div className="mb-4">
                              <div className="relative">
                                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                  <svg className="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                  </svg>
                                </div>
                                <input
                                  type="text"
                                  value={competitorSearchQuery}
                                  onChange={(e) => setCompetitorSearchQuery(e.target.value)}
                                  placeholder="Search competitors by name, category, or market cap..."
                                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                                />
                              </div>
                            </div>
                            
                            {/* Competitor Grid */}
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-2 max-h-64 overflow-y-auto">
                              {filteredCompetitors.length > 0 ? (
                                filteredCompetitors.map((competitor) => (
                                <button
                                  key={competitor.id}
                                  onClick={() => {
                                    if (selectedCompetitors.includes(competitor.id)) {
                                      setSelectedCompetitors(prev => prev.filter(id => id !== competitor.id));
                                    } else {
                                      setSelectedCompetitors(prev => [...prev, competitor.id]);
                                    }
                                  }}
                                  className={`p-3 border rounded-lg text-sm text-left transition-all duration-200 ${
                                    selectedCompetitors.includes(competitor.id)
                                      ? 'border-purple-500 bg-purple-50 text-purple-900'
                                      : 'border-gray-200 bg-white hover:border-gray-300 text-gray-700'
                                  }`}
                                >
                                  <div className="font-medium">{competitor.name}</div>
                                  <div className="text-xs opacity-75">{competitor.category} • {competitor.marketCap}</div>
                                </button>
                              ))
                              ) : (
                                <div className="col-span-full text-center py-8 text-gray-500">
                                  <div className="text-sm">No competitors found matching "{competitorSearchQuery}"</div>
                                  <button 
                                    onClick={() => setCompetitorSearchQuery('')}
                                    className="text-purple-600 hover:text-purple-700 text-sm mt-1"
                                  >
                                    Clear search
                                  </button>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Progressive Configuration Display */}
                      {showResearchConfig && (
                        <div className="space-y-6">
                          {/* 1. Research Focus Areas */}
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <label className="block text-sm font-medium text-gray-700">Research Focus Areas</label>
                              <button
                                onClick={() => setShowFocusLibrary(!showFocusLibrary)}
                                className="text-sm text-purple-600 hover:text-purple-700 transition-colors flex items-center space-x-1"
                              >
                                {showFocusLibrary ? (
                                  <>
                                    <ChevronUp className="w-4 h-4" />
                                    <span>Hide library</span>
                                  </>
                                ) : (
                                  <>
                                    <ChevronDown className="w-4 h-4" />
                                    <span>Browse library</span>
                                  </>
                                )}
                              </button>
                            </div>
                            
                            {agentConfig.purpose && (
                              <div className="mb-3">
                                {renderCompactPills(
                                  agentConfig.purpose.split(', ').filter(item => item.trim()),
                                  (index) => {
                                    const items = agentConfig.purpose.split(', ').filter(item => item.trim());
                                    items.splice(index, 1);
                                    setAgentConfig({...agentConfig, purpose: items.join(', ')});
                                  },
                                  showAllFocus,
                                  setShowAllFocus,
                                  'bg-purple-100 text-purple-800 border-purple-300',
                                  4
                                )}
                              </div>
                            )}
                            
                            {/* Expandable Focus Library */}
                            {showFocusLibrary && (
                              <div className="mb-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                                  {(selectedAgent === 'research-competitive-001' ? 
                                    [
                                      'pricing changes', 'feature releases', 'market positioning', 'new competitors',
                                      'product launches', 'partnership announcements', 'funding news', 'executive changes',
                                      'marketing campaigns', 'customer reviews', 'website updates', 'social media activity',
                                      'press releases', 'job postings', 'patent filings', 'regulatory filings'
                                    ] :
                                    selectedAgent === 'research-market-001' ?
                                    [
                                      'industry trends', 'market growth', 'customer sentiment', 'regulatory changes',
                                      'technology shifts', 'investment patterns', 'economic indicators', 'policy updates',
                                      'analyst reports', 'research publications', 'conference insights', 'survey data',
                                      'demographic changes', 'consumer behavior', 'adoption rates', 'market saturation'
                                    ] :
                                    selectedAgent === 'research-product-001' ?
                                    [
                                      'usage patterns', 'feature adoption', 'user engagement', 'performance metrics',
                                      'bug reports', 'user satisfaction', 'churn indicators', 'support tickets',
                                      'app store reviews', 'user feedback', 'beta testing results', 'a/b test outcomes',
                                      'integration usage', 'api consumption', 'mobile vs desktop', 'geographic usage'
                                    ] :
                                    [
                                      'content performance', 'seo rankings', 'engagement metrics', 'conversion rates',
                                      'social shares', 'brand mentions', 'viral content', 'trending topics',
                                      'backlink changes', 'keyword rankings', 'competitor content', 'industry news',
                                      'influencer mentions', 'pr coverage', 'event coverage', 'thought leadership'
                                    ]
                                  ).map((focus) => {
                                    const selectedFocus = agentConfig.purpose?.split(', ') || [];
                                    const isSelected = selectedFocus.includes(focus);
                                    
                                    return (
                                      <button
                                        key={focus}
                                        onClick={() => {
                                          if (isSelected) {
                                            const filteredFocus = selectedFocus.filter(f => f !== focus);
                                            setAgentConfig({
                                              ...agentConfig,
                                              purpose: filteredFocus.join(', ')
                                            });
                                          } else {
                                            const newFocus = [...selectedFocus, focus];
                                            setAgentConfig({
                                              ...agentConfig,
                                              purpose: newFocus.join(', ')
                                            });
                                          }
                                        }}
                                        className={`p-2 text-sm font-medium rounded-lg border transition-colors text-left ${
                                          isSelected
                                            ? 'bg-purple-100 text-purple-800 border-purple-300'
                                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                        }`}
                                      >
                                        {focus}
                                      </button>
                                    );
                                  })}
                                </div>
                              </div>
                            )}
                          </div>

                          {/* 2. Analysis Approach */}
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <label className="block text-sm font-medium text-gray-700">Analysis Approach</label>
                              <button
                                onClick={() => setShowAnalysisLibrary(!showAnalysisLibrary)}
                                className="text-sm text-blue-600 hover:text-blue-700 transition-colors flex items-center space-x-1"
                              >
                                {showAnalysisLibrary ? (
                                  <>
                                    <ChevronUp className="w-4 h-4" />
                                    <span>Hide library</span>
                                  </>
                                ) : (
                                  <>
                                    <ChevronDown className="w-4 h-4" />
                                    <span>Browse library</span>
                                  </>
                                )}
                              </button>
                            </div>
                            
                            {agentConfig.analysis_framework && (
                              <div className="mb-3">
                                {renderCompactPills(
                                  agentConfig.analysis_framework.split(', ').filter(item => item.trim()),
                                  (index) => {
                                    const items = agentConfig.analysis_framework.split(', ').filter(item => item.trim());
                                    items.splice(index, 1);
                                    setAgentConfig({...agentConfig, analysis_framework: items.join(', ')});
                                  },
                                  showAllAnalysis,
                                  setShowAllAnalysis,
                                  'bg-blue-100 text-blue-800 border-blue-300',
                                  4
                                )}
                              </div>
                            )}
                            
                            {/* Expandable Analysis Library */}
                            {showAnalysisLibrary && (
                              <div className="mb-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                                  {[
                                    // Core Analysis Methods
                                    'Use SWOT analysis', 'Use trend analysis', 'Use competitive benchmarking', 'Use sentiment analysis',
                                    'Use statistical comparison', 'Use pattern recognition', 'Use cohort analysis', 'Use A/B testing insights',
                                    // Advanced Techniques
                                    'Use regression analysis', 'Use time series analysis', 'Use correlation analysis', 'Use variance analysis',
                                    'Use market basket analysis', 'Use churn prediction', 'Use lifetime value analysis', 'Use price elasticity',
                                    // Qualitative Methods
                                    'Use thematic analysis', 'Use content analysis', 'Use discourse analysis', 'Use ethnographic research',
                                    'Use survey analysis', 'Use interview analysis', 'Use focus group insights', 'Use user journey mapping'
                                  ].map((approach) => {
                                    const selectedApproaches = agentConfig.analysis_framework?.split(', ') || [];
                                    const isSelected = selectedApproaches.includes(approach);
                                    
                                    return (
                                      <button
                                        key={approach}
                                        onClick={() => {
                                          if (isSelected) {
                                            const filteredApproaches = selectedApproaches.filter(a => a !== approach);
                                            setAgentConfig({
                                              ...agentConfig,
                                              analysis_framework: filteredApproaches.join(', ')
                                            });
                                          } else {
                                            const newApproaches = [...selectedApproaches, approach];
                                            setAgentConfig({
                                              ...agentConfig,
                                              analysis_framework: newApproaches.join(', ')
                                            });
                                          }
                                        }}
                                        className={`p-2 text-sm font-medium rounded-lg border transition-colors text-left ${
                                          isSelected
                                            ? 'bg-blue-100 text-blue-800 border-blue-300'
                                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                        }`}
                                      >
                                        {approach}
                                      </button>
                                    );
                                  })}
                                </div>
                              </div>
                            )}
                          </div>

                          {/* 3. Business Context & Industry */}
                          <div>
                            <div className="flex items-center justify-between mb-2">
                              <label className="block text-sm font-medium text-gray-700">Business Context</label>
                              <button
                                onClick={() => setShowContextLibrary(!showContextLibrary)}
                                className="text-sm text-green-600 hover:text-green-700 transition-colors flex items-center space-x-1"
                              >
                                {showContextLibrary ? (
                                  <>
                                    <ChevronUp className="w-4 h-4" />
                                    <span>Hide library</span>
                                  </>
                                ) : (
                                  <>
                                    <ChevronDown className="w-4 h-4" />
                                    <span>Browse library</span>
                                  </>
                                )}
                              </button>
                            </div>
                            
                            {agentConfig.business_context && (
                              <div className="mb-3">
                                {renderCompactPills(
                                  agentConfig.business_context.split(', ').filter(item => item.trim()),
                                  (index) => {
                                    const items = agentConfig.business_context.split(', ').filter(item => item.trim());
                                    items.splice(index, 1);
                                    setAgentConfig({...agentConfig, business_context: items.join(', ')});
                                  },
                                  showAllContext,
                                  setShowAllContext,
                                  'bg-green-100 text-green-800 border-green-300',
                                  4
                                )}
                              </div>
                            )}
                            
                            {/* Expandable Context Library */}
                            {showContextLibrary && (
                              <div className="mb-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
                                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                                  {[
                                    // Business Model
                                    'B2B SaaS', 'B2C Platform', 'B2B2C Model', 'Marketplace',
                                    'E-commerce', 'Subscription Service', 'API-first', 'White-label',
                                    // Target Market
                                    'Enterprise focus', 'SMB focus', 'Mid-market', 'Consumer',
                                    'Developer tools', 'IT/DevOps', 'Sales & Marketing', 'HR Tech',
                                    // Company Stage
                                    'Startup stage', 'Growth stage', 'Scale-up', 'Mature',
                                    'Pre-revenue', 'Post-Series A', 'Post-Series B', 'Public company',
                                    // Market Position
                                    'Market leader', 'Challenger brand', 'Niche player', 'New entrant',
                                    'Premium positioning', 'Value positioning', 'Disruptor', 'Established player',
                                    // Industry
                                    'High-tech', 'Healthcare', 'Fintech', 'EdTech',
                                    'PropTech', 'RetailTech', 'LegalTech', 'InsurTech',
                                    'Manufacturing', 'Professional Services', 'Media', 'Non-profit'
                                  ].map((context) => {
                                    const selectedContexts = agentConfig.business_context?.split(', ') || [];
                                    const isSelected = selectedContexts.includes(context);
                                    
                                    return (
                                      <button
                                        key={context}
                                        onClick={() => {
                                          if (isSelected) {
                                            const filteredContexts = selectedContexts.filter(c => c !== context);
                                            setAgentConfig({
                                              ...agentConfig,
                                              business_context: filteredContexts.join(', ')
                                            });
                                          } else {
                                            const newContexts = [...selectedContexts, context];
                                            setAgentConfig({
                                              ...agentConfig,
                                              business_context: newContexts.join(', ')
                                            });
                                          }
                                        }}
                                        className={`p-2 text-sm font-medium rounded-lg border transition-colors text-left ${
                                          isSelected
                                            ? 'bg-green-100 text-green-800 border-green-300'
                                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                                        }`}
                                      >
                                        {context}
                                      </button>
                                    );
                                  })}
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            )}

            {/* Step 3: Confirmation */}
            {step === 'confirm' && (
              <div>
                <div className="text-center mb-6">
                  <div className="mb-3">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                      {agentCategory === 'research' ? 'Research Agent' : 'Customer-Facing Agent'}
                    </span>
                  </div>
                  <h4 className="text-xl font-semibold text-gray-900 mb-2">Review & Create Agent</h4>
                  <p className="text-gray-600">Review your configuration and create your AI agent</p>
                </div>

                {/* Summary Card */}
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6 mb-6">
                  <div className="flex items-start space-x-4">
                    <div className="w-16 h-16 bg-blue-500 rounded-lg flex items-center justify-center">
                      {availableAgents.find(a => a.id === selectedAgent)?.icon && 
                        React.createElement(availableAgents.find(a => a.id === selectedAgent)!.icon, {
                          className: "w-8 h-8 text-white"
                        })
                      }
                    </div>
                    <div className="flex-1">
                      <h5 className="text-xl font-semibold text-gray-900 mb-1">
                        {availableAgents.find(a => a.id === selectedAgent)?.name}
                      </h5>
                      <p className="text-gray-600 mb-4">{agentConfig.purpose}</p>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        {agentCategory === 'research' ? (
                          <>
                            <div className="flex items-center space-x-1">
                              <Activity className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">Research Agent</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Users className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">{selectedAccounts.length} accounts</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Bot className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">Continuous monitoring</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Mail className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">Weekly reports</span>
                            </div>
                          </>
                        ) : (
                          <>
                            <div className="flex items-center space-x-1">
                              <Calendar className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">Every {agentConfig.outreach_frequency === '3days' ? '3 days' : agentConfig.outreach_frequency}</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Users className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">{selectedAccounts.length} accounts</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Bot className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600 capitalize">{agentConfig.tone} tone</span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Mail className="w-4 h-4 text-gray-400" />
                              <span className="text-gray-600">Email sequence</span>
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Configuration Details */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h6 className="font-medium text-gray-900 mb-3 flex items-center">
                      <Settings className="w-4 h-4 mr-2 text-gray-500" />
                      Configuration Summary
                    </h6>
                    <div className="space-y-2 text-sm">
                      {agentCategory === 'research' ? (
                        <>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Analysis Framework:</span>
                            <span className="font-medium text-right max-w-32 truncate" title={agentConfig.analysis_framework}>
                              {agentConfig.analysis_framework || 'Not specified'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Business Context:</span>
                            <span className="font-medium text-right max-w-32 truncate" title={agentConfig.business_context}>
                              {agentConfig.business_context || 'Not specified'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Alert Triggers:</span>
                            <span className="font-medium text-right max-w-32 truncate" title={agentConfig.escalation_rules}>
                              {agentConfig.escalation_rules || 'Not specified'}
                            </span>
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Max Attempts:</span>
                            <span className="font-medium">{agentConfig.max_attempts}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Message Style:</span>
                            <span className="font-medium capitalize">{agentConfig.message_style}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">AI Suggestions:</span>
                            <span className="font-medium">{agentConfig.ai_suggestions_enabled ? 'Enabled' : 'Disabled'}</span>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <h6 className="font-medium text-gray-900 mb-3 flex items-center">
                      <Activity className="w-4 h-4 mr-2 text-gray-500" />
                      Expected Results
                    </h6>
                    <div className="space-y-2 text-sm">
                      {agentCategory === 'research' ? (
                        <>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Research Scope:</span>
                            <span className="font-medium text-blue-600">Continuous monitoring</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Reporting:</span>
                            <span className="font-medium">Weekly insights</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Alert Response:</span>
                            <span className="font-medium text-green-600">Real-time</span>
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Estimated Reach:</span>
                            <span className="font-medium text-blue-600">{selectedAccounts.length * (agentConfig.max_attempts || 1)} contacts</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Timeline:</span>
                            <span className="font-medium">{Math.ceil((agentConfig.max_attempts || 1) * (agentConfig.outreach_frequency === 'daily' ? 1 : agentConfig.outreach_frequency === '3days' ? 3 : agentConfig.outreach_frequency === 'weekly' ? 7 : 14))} days</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Success Rate:</span>
                            <span className="font-medium text-green-600">~85-92%</span>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex items-center justify-between pt-6 border-t border-gray-200 mt-6">
              <button
                onClick={handleBack}
                className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span>
                  {step === 'category' ? 'Back to Agents' :
                   step === 'select' && entryPoint === 'customers' ? 'Back to Customers' : 
                   'Back'}
                </span>
              </button>
              
              <button
                onClick={step === 'confirm' ? handleCreateAgent : handleNext}
                disabled={
                  (step === 'category' && !agentCategory) ||
                  (step === 'select' && !selectedAgent) ||
                  (step === 'configure' && agentCategory === 'research' && !agentConfig.purpose)
                }
                className="px-6 py-2 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-blue-500 transition-colors flex items-center space-x-2"
              >
                <span>{step === 'confirm' ? 'Create Agent' : 'Next'}</span>
                {step === 'confirm' ? (
                  <Bot className="w-4 h-4" />
                ) : (
                  <ArrowRight className="w-4 h-4" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}